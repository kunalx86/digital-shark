// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  coins              Int       @default(0)
  fromProducts       Product[] @relation("from")
  toProducts         Product[] @relation("to")
  ownedProducts      Product[] @relation("owned")
  subscribedProducts Product[]
  subscribedTopics   Topic[]
  highestBids        Auction[] @relation("highest-bidder")
}

model Product {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  description     String    @db.Text
  image           String
  fromId          Int
  from            User      @relation("from", fields: [fromId], references: [id])
  toId            Int?
  to              User?     @relation("to", fields: [toId], references: [id])
  ownerId         Int
  owner           User      @relation("owned", fields: [ownerId], references: [id])
  topics          Topic[]
  subscribedUsers User[]
  auction         Auction?  @relation("auction")
}

model Topic {
  tag      String    @id @unique
  products Product[]
  users    User[]
}

model Auction {
  id              Int      @id @default(autoincrement())
  productId       Int      @unique
  product         Product  @relation("auction", fields: [productId], references: [id])
  basePrice       Int
  startTime       DateTime
  timeZone        String?  @db.VarChar(255)
  highestBid      Int?
  highestBidderId Int?
  highestBidder   User?    @relation("highest-bidder", fields: [highestBidderId], references: [id])
  sold            Boolean?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
